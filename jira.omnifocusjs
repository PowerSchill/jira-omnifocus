/*{
  "type": "action",
  "targets": ["omnifocus"],
  "author": "Mark E. Schill",
  "identifier": "net.cmschill.omnifocus.sync.jira",
  "version": "1.3",
  "description": "Sync elements from Jira with Omnifocus",
  "label": "ðŸ”¹ Jira: Sync",
  "shortLabel": "Jira: sync"
}*/
(() => {

  // Configure Preferences
  var preferences = new Preferences()

  const action = new PlugIn.Action(async function (selection, sender) {

    incrementedCount = preferences.readNumber("incrementedCount")
    if (!incrementedCount) {
      preferences.write("incrementedCount", 0)
      incrementedCount = 0
    }

    try {
      // Hold down control keys to reset values
      if (app.controlKeyDown) {
        alert = new Alert("Confirmation Required", alertMessage)
        alert.addOption("Reset")
        alert.addOption("Cancel")
        buttonIndex = await alert.show()

        if (buttonIndex === 0) {
          preferences.write("incrementedCount", 0)
          return "user reset"
        }

      }
      if (incrementedCount === 0) {
        defaultJiraUrl = ""
        defaultJiraAPIKey = ""

        jiraUrl = preferences.readString("jiraUrl")
        if (!jiraUrl) {
          jiraUrl = defaultJiraUrl
        }

        //TODO: convert this to a credential
        jiraAPIKey = preferences.readString("jiraAPIKey")
        if (!jiraAPIKey) {
          jiraAPIKey = defaultJiraAPIKey
        }

        jiraUrlInputField = new Form.Field.String(
          "jiraUrl",
          "URL",
          jiraUrl
        )


        jiraAPIKeyInputField = new Form.Field.String(
          "jiraAPIKey",
          "API Key",
          jiraAPIKey
        )

        inputForm = new Form()
        inputForm.addField(jiraUrlInputField)
        inputForm.addField(jiraAPIKeyInputField)
        inputForm.validate = function (formobject) {
          return true
        }

        formPrompt = "Enter values:"
        buttonTitle = "Continue"
        formobject = await inputForm.show(formPrompt, buttonTitle)

        jiraUrl = formobject.values['jiraUrl']
        if (!jiraUrl) { jiraUrl = "" }

        jiraAPIKey = formobject.values['jiraAPIKey']
        if (!jiraAPIKey) { jiraAPIKey = "" }

        preferences.write("jiraUrl", jiraUrl)
        preferences.write("jiraAPIKey", jiraAPIKey)
      }
    }
    catch (err) {
      if (!err.causedByUserCancelling) {
        console.error(err.name, err.message)
      }
    }

    preferences.write("incrementedCount", incrementedCount + 1)

    // START EDIT
    const configs = [{
      omnifocusTagToUse: "ðŸ§° JIRA", // you can also use the format "Parent1 : Parent2 : Child"
      jiraQuery: "assignee=currentuser() and resolution is empty",
      omnifocusCommentTagToUse: "Jira-Comment",
    }]
    // END EDIT

    configs.forEach((config) => {
      const omnifocusTagToUse = config.omnifocusTagToUse;
      const jiraQuery = config.jiraQuery;
      const omnifocusCommentTagToUse = config.omnifocusCommentTagToUse;

      const urlParams = "/rest/api/latest/search?jql=" + encodeURIComponent(jiraQuery);
      const url = jiraUrl + urlParams;

      const request = URL.FetchRequest.fromString(url);
      request.method = "GET";
      request.headers = { Authorization: `Bearer ${jiraAPIKey}` };
      const requestPromise = request.fetch();


      // Find the tag
      let tag = null;

      // If user gave an absolute path, parse it and process it
      const parsedOmnifocusTagToUse = omnifocusTagToUse.split(" : ");
      if (parsedOmnifocusTagToUse.length > 1) {
        let currentTag = null;
        let i;
        for (i = 0; i < parsedOmnifocusTagToUse.length; i++) {
          let newTag;
          if (currentTag) {
            newTag = currentTag.childNamed(parsedOmnifocusTagToUse[i]);
          } else {
            newTag = tags.byName(parsedOmnifocusTagToUse[i]);
          }
          if (!newTag) break;
          currentTag = newTag;
        }

        // after all ran, check if its a success, then apply tag
        if (
          currentTag &&
          i === parsedOmnifocusTagToUse.length &&
          currentTag.name ===
          parsedOmnifocusTagToUse[parsedOmnifocusTagToUse.length - 1]
        ) {
          tag = currentTag;
        }
      }
      if (!tag) {
        // if tag is not found yet
        tag =
          tags.byName(omnifocusTagToUse) ||
          flattenedTags.byName(omnifocusTagToUse) ||
          new Tag(omnifocusTagToUse);
      }
      if (!tag) {
        console.error(new Error("could not create tag"));
        return;
      }
      const tasks = tag.tasks;



      // cache object instead of array so search will be faster later
      let omnifocusTasks = {};
      tasks.forEach((task) => {
        const re = new RegExp(`^[A-Za-z0-9-]+`);
        let taskId;
        try {
          taskId = task.name.match(re)[0];
          if (!taskId) return;
        } catch {
          return;
        }
        omnifocusTasks[taskId] = task;
        // Reset Jira Match Flag
        omnifocusTasks[taskId].jiraToOmnifocusMatched = false;
      });

      requestPromise.then((response) => {
        let createdTasks = 0;
        let checkedTickets = 0;
        if (response.mimeType == "application/json") {
          const jsonResponse = JSON.parse(response.bodyString);
          // ADD THE TASKS


          for (const issue of jsonResponse.issues) {
            // Search if we need to add a new Task
            checkedTickets++;
            if (omnifocusTasks[issue.key]) {
              // Make sure the task opens again
              omnifocusTasks[issue.key].markIncomplete();
              omnifocusTasks[issue.key].jiraToOmnifocusMatched = true;
              continue;
            }

            // There was no Matching Task, so we create the Task
            const taskName = issue.key + " " + issue.fields.summary;
            const newTask = new Task(taskName, inbox.beginning);
            const taskUrl = jiraUrl + "/browse/" + issue.key;
            createdTasks++;

            newTask.addTag(tag);
            newTask.note =
              taskUrl + "\n" + (issue.fields.description || "No description");
          }


          //Close Tasks
          for (const [task_id, task] of Object.entries(omnifocusTasks)) {
            if (!task.jiraToOmnifocusMatched) {
              var can_delete = true;

              if (task.hasChildren) {
                task.children.forEach(subtask => {
                  if (!subtask.completed) {
                    can_delete = false;
                  }
                });
              }
              if (can_delete) {
                task.markComplete();
              }
            }
          };
        }
        console.log(`NOTICE: Synced ${jiraUrl}. Checked ${checkedTickets} Tickets, Created ${createdTasks} new tasks);
      });

      requestPromise.catch((err) => {
        console.log(`DEBUG: catch error ${ err } `);
      });
    });

  });

  action.validate = function (selection, sender) {
    //
    // This action is always valid.
    //
    return true;
  };

  return action;
})();
