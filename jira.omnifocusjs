/*{
  "type": "action",
  "targets": ["omnifocus"],
  "author": "Mark E. Schill",
  "identifier": "net.cmschill.omnifocus.sync.jira",
  "version": "1.4.0",
  "description": "Sync elements from Jira with Omnifocus",
  "label": "ðŸ”¹ Jira: Sync",
  "shortLabel": "Jira: sync"
}*/
(() => {
  const maxResultsPerPage = 25;

  var shouldLogToConsole = true;
  var serviceTitle = "JIRA Sync";
  var credentials = new Credentials();
  var preferences = new Preferences();
  var action = new PlugIn.Action(async function (selection, sender) {
    if (shouldLogToConsole) {
      console.log("Starting JIRA Sync...");
    }

    var credentialsObj = credentials.read(serviceTitle);

    if (app.controlKeyDown) {
      // Prompt the user to confirm the removal of stored credentials
      const alertMessage = "Remove the stored credentials?";
      const alert = new Alert("Confirmation Required", alertMessage);
      alert.addOption("Reset");
      alert.addOption("Cancel");

      // Show the alert and get the user's response
      const buttonIndex = await alert.show();

      // If the user chose "Reset", remove the stored credentials
      if (buttonIndex === 0) {
        credentials.remove(serviceTitle);
      }
    } else if (!credentialsObj) {
      inputForm = new Form();

      const userIDField = new Form.Field.String("userID", "User ID", null);
      if (Device.iPad || Device.iOS) {
        userIDField.autocapitalizationType = TextAutocapitalizationType.None;
      }

      const APIKeyField = new Form.Field.String("apiKey", "API Key", null);
      if (Device.iPad || Device.iOS) {
        APIKeyField.autocapitalizationType = TextAutocapitalizationType.None;
      }

      inputForm.addField(userIDField);
      inputForm.addField(APIKeyField);

      inputForm.validate = (formObject) => {
        const userID = formObject.values["userID"];
        const APIKey = formObject.values["apiKey"];
        return userID && APIKey ? true : false;
      };

      const formPrompt = "Enter your JIRA credentials:";
      const formObject = await inputForm.show(formPrompt, "Continue");

      const userID = formObject.values["userID"];
      const apiKey = formObject.values["apiKey"];

      credentials.write(serviceTitle, userID, apiKey);
    } else {
      try {
        var userID = credentialsObj.user;
        var apiKey = credentialsObj.password;

        if (shouldLogToConsole) {
          console.log("User ID:", userID);
          console.log("API Key:", apiKey);
        }

        jiraUrl =
          preferences.readString("jiraUrl") || "https://jira.atlassian.com";
        jiraUrlInputField = new Form.Field.String("jiraUrl", "URL", jiraUrl);

        omniFocusTag = preferences.readString("omniFocusTag") || "jira";
        omniFocusTagInputField = new Form.Field.String(
          "omniFocusTag",
          "OmniFocus Tag",
          omniFocusTag
        );

        jiraQuery =
          preferences.readString("jiraQuery") ||
          "assignee=currentuser() and resolution is empty";
        jiraQueryInputField = new Form.Field.String(
          "jiraQuery",
          "JIRA Search Query",
          jiraQuery
        );

        inputForm = new Form();
        inputForm.addField(jiraUrlInputField);
        inputForm.addField(omniFocusTagInputField);
        inputForm.addField(jiraQueryInputField);
        formPrompt = action.label;
        formObject = await inputForm.show(formPrompt, "Continue");

        var jiraUrl = formObject.values["jiraUrl"];
        preferences.write("jiraUrl", jiraUrl);
        var omniFocusTag = formObject.values["omniFocusTag"];
        preferences.write("omniFocusTag", omniFocusTag);
        var jiraQuery = formObject.values["jiraQuery"];
        preferences.write("jiraQuery", jiraQuery);

        if (shouldLogToConsole) {
          console.log("JIRA URL:", jiraUrl);
          console.log("OmniFocus Tag:", omniFocusTag);
          console.log("JIRA Query:", jiraQuery);
        }

        // Find the tag
        let tag = null;

        // If user gave an absolute path, parse it and process it
        const parsedOmnifocusTagToUse = omniFocusTag.split(" : ");
        if (parsedOmnifocusTagToUse.length > 1) {
          let currentTag = null;
          for (let i = 0; i < parsedOmnifocusTagToUse.length; i++) {
            let newTag = currentTag
              ? currentTag.childNamed(parsedOmnifocusTagToUse[i])
              : tags.byName(parsedOmnifocusTagToUse[i]);

            if (!newTag) break;
            currentTag = newTag;
          }

          // Check if the tag was successfully found and apply it
          if (
            currentTag &&
            currentTag.name ===
              parsedOmnifocusTagToUse[parsedOmnifocusTagToUse.length - 1]
          ) {
            tag = currentTag;
          }
        }

        if (!tag) {
          // If tag is not found yet, try to find or create it
          tag =
            tags.byName(omniFocusTag) ||
            flattenedTags.byName(omniFocusTag) ||
            new Tag(omniFocusTag);
        }

        if (!tag) {
          console.error(new Error("could not create tag"));
          return;
        }
        const tasks = tag.tasks;

        // cache object instead of array so search will be faster later
        let omnifocusTasks = {};
        tasks.forEach((task) => {
          const re = new RegExp(`^[A-Za-z0-9-]+`);
          let taskId;
          try {
            taskId = task.name.match(re)[0];
            if (!taskId) return;
          } catch {
            return;
          }
          omnifocusTasks[taskId] = task;
          // Reset Jira Match Flag
          omnifocusTasks[taskId].jiraToOmnifocusMatched = false;
        });

        // Begin the actual work

        const fetchJiraIssues = async (startAt = 0) => {
          const urlParams = `/rest/api/3/search/jql?maxResults=${maxResultsPerPage}&startAt=${startAt}&jql=${encodeURIComponent(
            jiraQuery
          )}`;
          const url = jiraUrl + urlParams;
          console.log("URL: ", url);

          const request = URL.FetchRequest.fromString(url);
          request.method = "GET";
          const data = Data.fromString(userID + ":" + apiKey);
          const authHeader = "Basic " + data.toBase64();

          request.headers = { Authorization: authHeader };
          const response = await request.fetch();

          if (response.mimeType == "application/json") {
            const jsonResponse = JSON.parse(response.bodyString);

            // Check for API errors
            if (jsonResponse.errorMessages || jsonResponse.errors) {
              console.error("API Error Response:", JSON.stringify(jsonResponse, null, 2));
              throw new Error(
                jsonResponse.errorMessages
                  ? jsonResponse.errorMessages.join(", ")
                  : "API returned an error"
              );
            }

            console.log("start", jsonResponse.startAt);
            console.log("maxResults", jsonResponse.maxResults);
            console.log("total", jsonResponse.total);

            // The new API uses 'values' instead of 'issues'
            const issues = jsonResponse.values || jsonResponse.issues || [];
            for (const issue of issues) {
              // Search if we need to add a new Task
              checkedTickets++;
              const existingTask = omnifocusTasks[issue.key];
              if (existingTask) {
                // Make sure the task opens again
                existingTask.markIncomplete();
                existingTask.jiraToOmnifocusMatched = true;
                continue;
              }

              // There was no Matching Task, so we create the Task
              const taskName = `${issue.key} ${issue.fields.summary}`;
              const newTask = new Task(taskName, inbox.beginning);
              const taskUrl = `${jiraUrl}/browse/${issue.key}`;
              createdTasks++;

              newTask.addTag(tag);
              newTask.note = `${taskUrl}\n${
                issue.fields.description || "No description"
              }`;
            }

            // Check if there are more results to fetch
            if (
              jsonResponse.startAt + jsonResponse.maxResults <
              jsonResponse.total
            ) {
              await fetchJiraIssues(
                jsonResponse.startAt + jsonResponse.maxResults
              );
            }
          }
        };

        let createdTasks = 0;
        let checkedTickets = 0;

        await fetchJiraIssues();

        // Close Tasks
        for (const [task_id, task] of Object.entries(omnifocusTasks)) {
          if (!task.jiraToOmnifocusMatched) {
            let canDelete = true;

            if (task.hasChildren) {
              for (const subtask of task.children) {
                if (!subtask.completed) {
                  canDelete = false;
                  break;
                }
              }
            }

            if (canDelete) {
              task.markComplete();
            }
          }
        }

        console.log(
          `NOTICE: Synced ${jiraUrl}. Checked ${checkedTickets} Tickets, Created ${createdTasks} new tasks`
        );
      } catch (err) {
        if (!err.message.includes("cancelled")) {
          new Alert(err.name, err.message).show();
        }
      }
    }
  });

  action.validate = function (selection, sender) {
    //
    // This action is always valid.
    //
    return true;
  };

  return action;
})();
